var searchIndex = JSON.parse('{\
"as_ffi_bindings":{"doc":"The current module give a free access to an helper. With …","t":[13,3,3,13,3,3,4,13,8,13,3,4,8,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12,12,12,12],"n":["Any","AnyPtr","AnyPtrExported","Buffer","BufferPtr","Env","Error","Mem","Read","String","StringPtr","Type","Write","abort","alloc","alloc","alloc","alloc","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","content","default","deref","deref","deref","deref","deref","deref","deref","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deref_mut","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","deserialize","drop","drop","drop","drop","drop","drop","drop","empty_array","empty_array","empty_array","export","fmt","fmt","fn_collect","fn_new","fn_pin","fn_unpin","free","free","free","free","from","from","from","from","from","from","from","from_array","from_array","from_array","from_c_struct","from_c_struct","from_c_struct","from_native","from_native","from_native","from_slice","from_slice","from_slice","id","import","init","init","init","init","init","init","init","init","init_with_instance","into","into","into","into","into","into","into","into_array","into_array","into_array","into_c_struct","into_c_struct","into_c_struct","memory","new","new","new","new","offset","offset","offset","offset","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","pointer_metadata","read","read","read","read","serialize","size","size","size","size","to_native","to_native","to_native","to_owned","to_owned","to_owned","to_owned","to_string","to_type","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_box","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_mut","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","upcast_any_ref","wasm_types","wasm_types","wasm_types","write","write","write","write","0","0","0","0"],"q":["as_ffi_bindingsas_ffi_bindings::Error","as_ffi_bindings::Type","",""],"d":["","","","","","","","","","","","","","","Try to write in the given environment a new value thanks …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Unpin the pointer","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","Create a new pointer with an allocation and write the …","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Get ptr stored offset","","","","","","","","","","Read the value contained in the given memory at the …","","","","","Read the size as indicated in the AssemblyScript object …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Try to write in the given environment a value. If the size …","","","","","","",""],"i":[1,0,0,1,0,0,0,2,0,1,0,0,0,0,3,4,5,6,7,1,4,5,8,6,2,7,1,4,5,8,6,2,4,5,8,6,4,5,8,6,7,8,7,1,4,5,8,6,2,7,1,4,5,8,6,2,7,7,1,4,5,8,6,2,7,1,4,5,8,6,2,4,5,6,4,2,2,8,8,8,8,3,4,5,6,7,1,4,5,8,6,2,4,5,6,4,5,6,4,5,6,4,5,6,7,4,7,1,4,5,8,8,6,2,8,7,1,4,5,8,6,2,4,5,6,4,5,6,8,4,5,8,6,1,4,5,6,7,1,4,5,8,6,2,9,4,5,6,7,9,4,5,6,4,5,6,4,5,8,6,2,4,7,1,4,5,8,6,2,7,1,4,5,8,6,2,7,1,4,5,8,6,2,7,1,4,5,8,6,2,7,1,4,5,8,6,2,7,1,4,5,8,6,2,4,5,6,3,4,5,6,10,11,12,13],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,[[["env",3],["stringptr",3],["stringptr",3],["i32",0],["i32",0]],["result",4,[["runtimeerror",3]]]],[[["",0],["env",3]],["result",6,[["box",3]]]],[[["vec",3],["env",3]],["result",6,[["box",3,[["anyptr",3]]]]]],[[["vec",3],["env",3]],["result",6,[["box",3,[["bufferptr",3]]]]]],[[["string",3],["env",3]],["result",6,[["box",3,[["stringptr",3]]]]]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["",0]],["",0]],[[["anyptr",3]],["anyptr",3]],[[["bufferptr",3]],["bufferptr",3]],[[["env",3]],["env",3]],[[["stringptr",3]],["stringptr",3]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],[[["",0],["",0]]],null,[[],["env",3]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[["usize",0]],["",0]],[[],["result",6,[["anyptrexported",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["",0],["",0]],["result",4,[["with",3]]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[["usize",0]]],[[]],[[]],[[]],[[["anyptr",3],["memory",3]],["result",6,[["anyptrexported",3]]]],[[["error",4],["formatter",3]],["result",6]],[[["error",4],["formatter",3]],["result",6]],null,null,null,null,[[["env",3]],["result",6]],[[["anyptr",3],["env",3]],["result",6]],[[["bufferptr",3],["env",3]],["result",6]],[[["stringptr",3],["env",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["anyptr",3]],[[],["bufferptr",3]],[[],["stringptr",3]],[[],["result",4,[["tryfromsliceerror",3]]]],[[],["result",4,[["tryfromsliceerror",3]]]],[[],["result",4,[["tryfromsliceerror",3]]]],null,[[["anyptrexported",3],["env",3]],["result",6,[["type",4]]]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[],["usize",0]],[[["env",3],["instance",3]],["result",6]],[[],["usize",0]],[[],["usize",0]],[[["env",3],["instance",3]],["result",4,[["hostenviniterror",4]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,[[["u32",0]],["anyptr",3]],[[["u32",0]],["bufferptr",3]],[[["memory",3],["option",4,[["function",3]]],["option",4,[["function",3]]],["option",4,[["function",3]]],["option",4,[["function",3]]]],["env",3]],[[["u32",0]],["stringptr",3]],[[["type",4]],["u32",0]],[[["anyptr",3]],["u32",0]],[[["bufferptr",3]],["u32",0]],[[["stringptr",3]],["u32",0]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["",0],["memory",3]],["result",6]],[[["anyptr",3],["memory",3]],["result",6,[["vec",3,[["u8",0]]]]]],[[["bufferptr",3],["memory",3]],["result",6,[["vec",3,[["u8",0]]]]]],[[["stringptr",3],["memory",3]],["result",6,[["string",3]]]],[[["anyptrexported",3]],["vec",3,[["u8",0]]]],[[["",0],["memory",3]],["result",6,[["u32",0]]]],[[["anyptr",3],["memory",3]],["result",6,[["u32",0]]]],[[["bufferptr",3],["memory",3]],["result",6,[["u32",0]]]],[[["stringptr",3],["memory",3]],["result",6,[["u32",0]]]],[[["anyptr",3]]],[[["bufferptr",3]]],[[["stringptr",3]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]]],[[["",0]],["string",3]],[[["anyptr",3],["memory",3]],["result",6,[["type",4]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["",0]],["typeid",3]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["box",3,[["global",3]]]],["box",3,[["any",8],["global",3]]]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[["",0]],["any",8]],[[]],[[]],[[]],[[["",0],["",0],["env",3]],["result",6,[["box",3]]]],[[["anyptr",3],["vec",3],["env",3]],["result",6,[["box",3,[["anyptr",3]]]]]],[[["bufferptr",3],["vec",3],["env",3]],["result",6,[["box",3,[["bufferptr",3]]]]]],[[["stringptr",3],["string",3],["env",3]],["result",6,[["box",3,[["stringptr",3]]]]]],null,null,null,null],"p":[[4,"Type"],[4,"Error"],[8,"Write"],[3,"AnyPtr"],[3,"BufferPtr"],[3,"StringPtr"],[3,"AnyPtrExported"],[3,"Env"],[8,"Read"],[13,"Mem"],[13,"String"],[13,"Buffer"],[13,"Any"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
